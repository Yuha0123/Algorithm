#include<iostream>
#include<vector>
#include<string>
#include<queue>
using namespace std;

vector<vector<int>> set_map(int row, int col);
int BFS(vector<vector<int>> map, int row, int col);

int main()
{
	int row, col;
	int distance = 0;
	cin >> row >> col;
	

	//0 - empty space, 1 - hedgehog, 2 - water, 3 - rock, 4 - cave
	//갔던 곳을 또 갈 필요는 없음. -1 - visited

	vector<vector<int>> map = set_map(row, col);

	distance = BFS(map, row, col);

	if (distance == -1)
		cout << "KAKTUS";
	else
		cout << distance;

}

int BFS(vector<vector<int>> map, int row, int col)
{
	int distance = 0;
	queue<pair<int, int>> q;
	queue<pair<int, int>> q_water;
	vector<vector<int>> visit_water;
	int dr[] = { -1, 1, 0, 0 }, dc[] = { 0, 0, -1, 1 };

	for (int i = 0; i < row; i++)
		visit_water.push_back(vector<int>(col));


	//find the start position of hedgehog and water
	for (int i = 0; i < row; i++)
	{
		for (int j = 0; j < col; j++)
		{
			if (map[i][j] == 1)
			{
				q.push(make_pair(i, j));
				map[i][j] = 0;
			}
			else if (map[i][j] == 2)
			{
				q_water.push(make_pair(i, j));
			}
		}
	}


	while (!q.empty())
	{

		int num = q_water.size();
		while (num--)
		{
			int x = q_water.front().first;
			int y = q_water.front().second;
			q_water.pop();

			if (x < 0 || y < 0)
				continue;
			else if (x >= row || y >= col)
				continue;
			else if (visit_water[x][y] > 0)
				continue;
			else if (map[x][y] == 4 || map[x][y] == 3)
				continue;
			else
			{
				map[x][y] = 2;
				visit_water[x][y] = 1;

				for (int i = 0; i < 4; i++)
				{
					int nr = x + dr[i], nc = y + dc[i];
					if (nr < 0 || nr >= row || nc < 0 || nc >= col)
						continue;
					if(visit_water[nr][nc] == 0)
						q_water.push(make_pair(nr, nc));
				}

			}
		}


		num = q.size();

		while (num--)
		{
			int x = q.front().first;
			int y = q.front().second;
			q.pop();

			if (x < 0 || x >= row || y < 0 || y >= col)
				continue;
			else if (map[x][y] == 4)
				return distance;
			else if (map[x][y] != 0)
				continue;


			q.push(make_pair(x + 1, y));
			q.push(make_pair(x - 1, y));
			q.push(make_pair(x, y + 1));
			q.push(make_pair(x, y - 1));

			
			map[x][y] = -1;
		}

		distance++;
	}

	return -1;
}



vector<vector<int>> set_map(int row, int col)
{
	vector<vector<int>> map;

	for (int i = 0; i < row; i++)
	{
		vector<int> v;

		string buffer;
		cin >> buffer;

		for (int j = 0; j < col; j++)
		{
			
			if (buffer[j] == '.')
				v.push_back(0);
			else if (buffer[j] == 'S')
				v.push_back(1);
			else if (buffer[j] == '*')
				v.push_back(2);
			else if (buffer[j] == 'X')
				v.push_back(3);
			else if (buffer[j] == 'D')
				v.push_back(4);
			
		}

		map.push_back(v);
	}



	return map;
}
