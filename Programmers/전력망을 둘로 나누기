import collections

def solution(n, wires):
    #자식을 count
    #부모 노드 표시
    
    cnt_child = collections.defaultdict(int)
    parent = [-1 for _ in range(n+1)]
    visited = [-1 for _ in range(n+1)]
    
    #init cnt_child
    for i in range(1, n+1):
        cnt_child[i] = 1
    
    def update_cnt_child(cur_node):
        p = parent[cur_node]
        
        while p != -1:
            cnt_child[p] += 1
            p = parent[p]
    ##################################
    
    node = collections.defaultdict(list)
    
    q = collections.deque()
    
    for wire in wires:
        node[wire[0]].append(wire[1])
        node[wire[1]].append(wire[0])
        
    q.append(1)
    
    while q:
        p = q.popleft()
        visited[p] = 1
        
        for v in node[p]:
            if visited[v] == -1:
                q.append(v)
                parent[v] = p
                update_cnt_child(v)
    
    visited = [-1 for _ in range(n+1)]
    answer = n
    
    q.append(1)
    #정답 계산
    while q:
        p = q.popleft()
        visited[p] = 1
        
        for v in node[p]:
            if visited[v] == -1:
                q.append(v)

                answer = min(answer, abs(n - 2*(cnt_child[v])))
            
    
    
    return answer
