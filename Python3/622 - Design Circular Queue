class MyCircularQueue:

    def __init__(self, k: int):
        self.front = 0
        self.rear = 0
        
        self.maxsize = k
        
        self.circular_queue = [None]*k

    def enQueue(self, value: int) -> bool:
        if self.isFull() == False:
            self.circular_queue[self.rear % self.maxsize] = value
            self.rear = self.rear + 1
            return True
        else:
            return False

    def deQueue(self) -> bool:
        if self.isEmpty() == False:
            self.front = self.front + 1
            return True
        else:
            return False
        
        
    def Front(self) -> int:
        if self.isEmpty() == False:
            return self.circular_queue[self.front % self.maxsize]
        else:
            return -1
        
    
    def Rear(self) -> int:
        if self.isEmpty() == False:
            return self.circular_queue[(self.rear - 1) % self.maxsize]
        else:
            return -1
        

    def isEmpty(self) -> bool:
        if self.rear == self.front:
            return True
        else:
            return False
        

    def isFull(self) -> bool:
        if self.rear - self.front == self.maxsize:
            return True
        else:
            return False


# Your MyCircularQueue object will be instantiated and called as such:
# obj = MyCircularQueue(k)
# param_1 = obj.enQueue(value)
# param_2 = obj.deQueue()
# param_3 = obj.Front()
# param_4 = obj.Rear()
# param_5 = obj.isEmpty()
# param_6 = obj.isFull()
