# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def mergeKLists(self, lists: List[ListNode]) -> ListNode:
        
        def merge_lists(node_1, node_2):
            
            if node_1 is None and node_2 is None:
                return None
            elif node_1 is None:
                return node_2
            elif node_2 is None:
                return node_1
            
            if node_1.val <= node_2.val:
                head = node_1
                cur_node_1 = head
                cur_node_2 = node_2
            else:
                head = node_2
                cur_node_1 = head
                cur_node_2 = node_1
            
            while cur_node_1.next is not None and cur_node_2 is not None:
                next_val = cur_node_1.next.val
               
                if next_val > cur_node_2.val:
                    next_node = cur_node_1.next
                    cur_node_1.next = cur_node_2

                    while cur_node_2.next is not None and next_val >= cur_node_2.next.val :
                        cur_node_2 = cur_node_2.next

                    cur_node_2.next, cur_node_2 = next_node, cur_node_2.next
                    cur_node_1 = next_node
                else:
                    cur_node_1 = cur_node_1.next
                
            if cur_node_2 is not None:
                cur_node_1.next = cur_node_2
                
            return head
        
        
        
        
        if len(lists) == 0:
            return None
        elif len(lists) == 1:
            return lists[0]
        
        for i in range(1, len(lists)):
            lists[0] = merge_lists(lists[0],lists[i])
            
        return lists[0]
        
