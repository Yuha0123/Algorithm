class Solution:
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        traced = set()
        visited = set()
    
        
        def DFS(x):
            if x in traced:
                return False
            
            if x in visited:
                return True
            
            traced.add(x)
            for i in graph[x]:
                if DFS(i) == False:
                    return False
            traced.remove(x)
            visited.add(x)
            return True
            
        
        graph = collections.defaultdict(list)
        
        #make graph
        for course, pre in prerequisites:
            graph[course].append(pre)
            
        
        #find cycle
        for i in list(graph.keys()):
            if DFS(i) == False:
                return False
        
        return True
