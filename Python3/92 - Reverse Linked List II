# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseBetween(self, head: ListNode, left: int, right: int) -> ListNode:
        
        if head is None or head.next is None:
            return head
        
        cur_node = head
        
        #find position of left
        if right - left >0:
            
         
            for i in range(left - 1):
                left_prev = cur_node
                cur_node = cur_node.next

            right_prev = cur_node

            prev_node = cur_node
            cur_node = cur_node.next
            prev_node.next = None

            for i in range(right - left):
                cur_node.next, cur_node, prev_node = prev_node, cur_node.next, cur_node

            if left == 1:
                right_prev.next = cur_node
                return prev_node
            
            right_prev.next = cur_node
            left_prev.next = prev_node
        
        return head
